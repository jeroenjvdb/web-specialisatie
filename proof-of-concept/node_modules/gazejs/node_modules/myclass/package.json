{
  "name": "myclass",
  "version": "1.0.2",
  "description": "Probably the fastest JS class system out there",
  "main": "index.js",
  "directories": {
    "example": "example"
  },
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/yelo-npm/my-class.git"
  },
  "keywords": [
    "class",
    "oop",
    "inheritance"
  ],
  "contributors": [
    {
      "name": "Jie Meng-GÃ©rard",
      "url": "https://github.com/jiem"
    }
  ],
  "author": {
    "name": "xananax@yelostudio.com"
  },
  "license": "MIT",
  "readmeFilename": "README.md",
  "readme": "# my.class.js\n\nProbably the fastest JS class system out there. 100% no wrappers, same perfs as hand-written pure JS classes.\n\nForked from <https://github.com/jiem/my-class>. I just package it as an NPM module, and will keep syncing the two repos.\n\n* [instantiation perfs] (http://jsperf.com/moo-resig-ender-my)\n* [inheritance perfs - calling super constructor] (http://jsperf.com/moo-resig-ender-my/2)\n* [inheritance perfs - calling super method] (http://jsperf.com/moo-resig-ender-my/3)\n\nSee a little [demo] (http://myjs.fr/my-class/example/example.html).  \n\nMy.js class system is not only a class implementation, it's mostly a class design.\n\nSee [how My.js classes achieve better perfs] (http://myjs.fr/my-class/).\n\n\n## Create a class\n\n Assume that classes are created in the namespace `myLib`.\n\n    (function() {\n\n      var Person = my.Class({\n\n        STATIC: {\n          AGE_OF_MAJORITY: 18\n        },\n\n        constructor: function(name, age) {\n          this.name = name;\n          this.age = age;\n        },\n\n        sayHello: function() {\n          console.log('Hello from ' + this.name + '!');\n        },\n\n        drinkAlcohol: function() {\n          this.age < Person.AGE_OF_MAJORITY ?\n            console.log('Too young! Drink milk instead!') :\n            console.log('Whiskey or beer?');\n        }\n\n      });\n\n      myLib.Person = Person;\n\n    })();\n\n    var john = new myLib.Person('John', 16);\n    john.sayHello(); //log \"Hello from John!\"\n    john.drinkAlcohol(); //log \"Too young! Drink milk instead!\"\n\n\n## Extend a class\n\n    (function() {\n\n      //Dreamer extends Person\n      var Dreamer = my.Class(Person, {\n\n        constructor: function(name, age, dream) {\n          Dreamer.Super.call(this, name, age);\n          this.dream = dream;\n        },\n\n        sayHello: function() {\n          superSayHello.call(this);\n          console.log('I dream of ' + this.dream + '!');\n        },\n\n        wakeUp: function() {\n          console.log('Wake up!');\n        }\n\n      });\n\n      var superSayHello = Dreamer.Super.prototype.sayHello;\n\n      myLib.Dreamer = Dreamer;\n\n    })();\n\n    var sylvester = new myLib.Dreamer('Sylvester', 30, 'eating Tweety');\n    sylvester.sayHello(); //log \"Hello from Sylvester! I dream of eating Tweety!\"\n    sylvester.wakeUp(); //log \"Wake up!\"\n\n\n## Private methods\n\n See the section \"Private fields and methods\" of [this post] (http://myjs.fr/my-class/).\n\n\n## Add methods to a class\n\n    my.extendClass(myLib.Dreamer, {\n\n      touchTheSky: function() {\n        console.log('Touching the sky');\n      },\n\n      reachTheStars: function() {\n        console.log('She is so pretty!');\n      }\n\n    });\n\n## Implement classes\n\n     myLib.ImaginaryTraveler = my.Class({\n      travel: function() { console.log('Traveling on a carpet!'); },\n      crossOceans: function() { console.log('Saying hi to Moby Dick!'); }\n    });\n\n    (function() {\n\n      //Dreamer extends Person implements ImaginaryTraveler\n      var Dreamer = my.Class(Person, ImaginaryTraveler, {\n\n        constructor: function(name, age, dream) {\n          Dreamer.Super.call(this, name, age);\n          this.dream = dream;\n        },\n\n        ...\n\n      });\n\n      myLib.Dreamer = Dreamer;\n\n    })();\n\n    var aladdin = new Dreamer('Aladdin');\n    aladdin instanceof Person; //true\n    aladdin instanceof ImaginaryTraveler; //false\n    aladdin.travel();\n    aladdin.wakeUp();\n    aladdin.sayHello();\n\n## Afraid to forget the `new` operator?\n\n    var Person = my.Class({\n\n      //you can now call the constructor with or without new\n      constructor: function(name, city) {\n        if (!(this instanceof Person))\n          return new Person(name, city);\n        this.name = name;\n        this.city = citye;\n      }\n\n    });\n",
  "_id": "myclass@1.0.2",
  "dist": {
    "shasum": "ca2136f0f3bab141068aee828a75188e810b75d7",
    "tarball": "http://registry.npmjs.org/myclass/-/myclass-1.0.2.tgz"
  },
  "_npmVersion": "1.1.65",
  "_npmUser": {
    "name": "xananax",
    "email": "xananax@yelostudio.com"
  },
  "maintainers": [
    {
      "name": "xananax",
      "email": "xananax@yelostudio.com"
    }
  ],
  "_shasum": "ca2136f0f3bab141068aee828a75188e810b75d7",
  "_resolved": "https://registry.npmjs.org/myclass/-/myclass-1.0.2.tgz",
  "_from": "myclass@>=1.0.2",
  "bugs": {
    "url": "https://github.com/yelo-npm/my-class/issues"
  },
  "homepage": "https://github.com/yelo-npm/my-class#readme"
}
